---
import Layout from '../layouts/Layout.astro'
import { data } from '../utils/data'
---

<Layout title="Photography.">
  <div class="slider p-0 overflow-hidden h-screen box-border">
    <div
      data-slider-track
      class="slider-track absolute flex flex-row flex-nowrap will-change-transform mt-0 mb-0 select-none box-border touch-pan-y pointer-events-none"
    >
      {
        data.map(({ title, image }, index) => {
          return (
            <div
              class="slider-item relative flex-grow-0 flex-shrink-0 basis-auto pt-0 pb-0 box-border group"
              data-index={index + 1}
              data-name={title}
              data-slider-item
            >
              <a
                class="slide w-[37.5vw] me-[2.917vw] flex justify-center items-center overflow-hidden scale-100 pointer-events-auto"
                style={{ marginTop: index * 250 + 'px' }}
                data-magnet="discover"
                data-scroll-el
                data-index={index + 1}
                data-name={title}
                href="/about"
                data-transition-name={title.toUpperCase()}
              >
                <img
                  class="object-cover h-screen w-full [backface-visibility:hidden] group-hover:scale-110 transition-transform duration-500"
                  src={image}
                  alt={title}
                  width={1000}
                  height={1000}
                />
              </a>
            </div>
          )
        })
      }
    </div>
  </div>
</Layout>

<script>
  import barba from '@barba/core'
  import gsap from 'gsap'

  function delay(n: number): Promise<void> {
    n = n || 2000
    return new Promise((done) => {
      setTimeout(() => {
        done()
      }, n)
    })
  }

  function pageTransition() {
    const tl = gsap.timeline({
      defaults: {
        duration: 2,
        ease: 'power3.inOut'
      }
    })
    tl.to('.barba-transition', {
      x: 0
    })
    tl.to('.barba-transition', {
      xPercent: -100
    })
  }

  gsap.to(['.number-slider-track', '.title-slider-track'], {
    y: 0
  })

  // barba.init({
  //   transitions: [
  //     {
  //       sync: true,
  //       async before(data) {
  //         const trigger = data.trigger as HTMLElement
  //         const title = trigger.dataset.transitionName?.split(' ')
  //         const titleContainer = document.querySelector(
  //           '.barba-transition-title'
  //         )
  //         if (title && titleContainer) {
  //           for (const [index, value] of title.entries()) {
  //             const div = document.createElement('div')
  //             const span = document.createElement('span')
  //             span.textContent = value
  //             if ((index + 1) % 2 === 0) {
  //               div.className = 'italic'
  //             }
  //             div.appendChild(span)
  //             titleContainer.appendChild(div)
  //           }
  //         }
  //       },
  //       async leave(data) {
  //         if (this.async) {
  //           const done = this.async()
  //           pageTransition()
  //           await delay(1000)
  //           done()
  //         }
  //       },
  //       async afterEnter() {},

  //       async once() {
  //         const timeline = gsap.timeline({
  //           repeat: -1,
  //           defaults: {
  //             duration: 0.5,
  //             delay: 1
  //           }
  //         })

  //         const words = document.querySelector('.words div')
  //         const totalWords = words?.children.length || 0

  //         for (let i = 0; i < totalWords; i++) {
  //           timeline.to('.words', {
  //             yPercent: '-=100'
  //           })
  //         }

  //         gsap.set('.number-slider-track', {
  //           color: '#222'
  //         })
  //       },
  //       beforeOnce(){
  //         const timeline = gsap.timeline({
  //           repeat: -1,
  //           defaults: {
  //             duration: 0.5,
  //             delay: 1
  //           }
  //         })

  //         const words = document.querySelector('.words div')
  //         const totalWords = words?.children.length || 0

  //         for (let i = 0; i < totalWords; i++) {
  //           timeline.to('.words', {
  //             yPercent: '-=100'
  //           })
  //         }

  //         gsap.set('.number-slider-track', {
  //           color: '#222'
  //         })
  //       }
  //     }
  //   ]
  // })

  /****************************************************/

  // const scrollTrigger = ScrollTrigger.create({
  //   start: 0, // <-- Vertical[x:trigger, y?:window = top || x: trigger, y: window]; top, bottom, center, "bottom-=100px", "100px +=200px" || Horizontal = left, right
  //   markers: true,
  //   scrub: true, // <-- actua como un depurador, tiene funciones como play, pause, resume, restart, reverse, complete, reset
  //   snap: 0.1, // <-- Solo se detiene en esos valores
  //   end: '+=3000',
  //   onUpdate(self) {
  //     /* NOTES:
  //      * direction => -1 = scroll hacia arriba, 1 = scroll hacia abajo
  //      * progress = Solo puede llegar hasta el 1
  //      */
  //     if (self.direction >= 1 && self.progress === 1) {
  //       wrapForward()
  //       ScrollTrigger.refresh()
  //     } else if (self.direction <= 0 && self.progress === 0) {
  //       wrapBackward()
  //       ScrollTrigger.refresh()
  //     } else {
  //     }
  //   },
  //   animation: gsap.to('.slider-track', {
  //     x: '-=100%',
  //     ease: 'power3'
  //   })
  // onEnter: (self) => {}, // Cuando avanza el scroll desde el comienzo
  // onEnterBack: () => {}, // Cuando se retrocede el scroll al final
  // onLeave: () => {} // Cuando se scrollea mas alla del final
  // toggleClass: 'is-moving' // Agrega la clase al trigger
  // onLeaveBack: () => {}// Cuando se scrollea mas alla del final
  // onRefresh: () => {}// Cuando se reduce el tama√±o del trigger
  // toggleActions: 'play none none none' // Determina la animacion segun las funciones onEnter, onLeave, onEnterBack, and onLeaveBack,
  // })

  // console.log(document.querySelector('.slider-track')?.clientWidth);

  // const sliderTrack: HTMLElement | null =
  //   document.querySelector('.slider-track')
  // function wrapForward() {
  //   const sliderItem: NodeListOf<HTMLElement> =
  //     document.querySelectorAll('.slider-item')
  //   const slide: NodeListOf<HTMLElement> = document.querySelectorAll('.slide')
  //   const getSliderStart = sliderItem[0].cloneNode(true)
  //   sliderItem[0].remove()
  //   sliderTrack && sliderTrack.append(getSliderStart)
  //   slide.forEach((s, index) => {
  //     gsap.to(s, {
  //       marginTop: 0,
  //       marginLeft: 0
  //     })
  //   })
  // }

  // function wrapBackward() {
  //   const sliderItem: NodeListOf<HTMLElement> =
  //     document.querySelectorAll('.slider-item')
  //   const slide: NodeListOf<HTMLElement> = document.querySelectorAll('.slide')
  //   const getSliderEnd = sliderItem[sliderItem.length - 1].cloneNode(true)
  //   sliderItem[sliderItem.length - 1].remove()
  //   sliderItem[0].parentNode?.insertBefore(getSliderEnd, sliderItem[0])
  //   slide.forEach((s, index) => {
  //     gsap.to(s, {
  //       marginTop: 0,
  //       marginLeft: 0
  //     })
  //   })
  // }

  // Scroll hacia abajo
  // slider-track(x, y): INICIO(0, 0) SCROLL(-776.172px, -250.75px) (-1552.34px, -501.5px) (-2328.52px, -752.25px) (-3104.69px, -1003px)
  // slide INICIO (top, left)0  SCROLL (0, 0) (250.75px, 776.172px)
  // Scroll hacia arriba
  // slider-track(x, y): INICIO(0, 0) SCROLL(776.172px, 250.75px) (1552.34px, 501.5px) (2328.52px, 752.25px) (3104.69px, 1003px)
  // slide INICIO (top, left)0  SCROLL (0, 0) (-250.75px, -776.172px)

  // Reglas
  // Al hacer scroll al slider se le agrega el is-moving y luego de 600 milisengudos lo elimina
  // Quien se mueve es el slider-track
</script>
